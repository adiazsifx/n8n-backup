{"createdAt":"2025-04-28T13:56:34.616Z","updatedAt":"2025-07-18T16:34:10.000Z","id":"5YW81CiyqESSznyr","name":"Ag_Manual_Portal","active":true,"isArchived":false,"nodes":[{"parameters":{"httpMethod":"POST","path":"asistant-portal","responseMode":"lastNode","options":{}},"type":"n8n-nodes-base.webhook","typeVersion":2,"position":[-1580,-420],"id":"f02b3bf2-ba9e-4cf7-a683-d5587b6fef93","name":"Webhook","webhookId":"bcecb452-c7f1-4f94-92ea-2e967f3bf8a6"},{"parameters":{"jsCode":"/**\n * JSON Structure Validator for n8n\n * \n * Takes input from previous node using $input.first().json.body\n * and validates that it follows the expected structure\n */\n\n// Get the JSON data from the previous node\nconst inputData = $input.first().json.body\nlet jsonToValidate;\n\n// Parse the JSON if it's a string, or use it directly if it's already an object\ntry {\n  jsonToValidate = typeof inputData === 'string' ? JSON.parse(inputData) : inputData;\n} catch (error) {\n  return {\n    success: false,\n    message: \"Invalid JSON input: \" + error.message,\n    data: null\n  };\n}\n\n/**\n * Validates the structure of the JSON\n * @param {Object} json - The JSON object to validate\n * @returns {Object} - Validation result with success status and message\n */\nfunction validateJsonStructure(json) {\n  try {\n    // Define the expected structure\n    const requiredFields = {\n      \"message\": \"string\"\n    };\n\n    // Check all required fields\n    for (const field in requiredFields) {\n      if (!json.hasOwnProperty(field)) {\n        return {\n          success: false,\n          message: `Missing required field: ${field}`,\n          data: null\n        };\n      }\n\n      // Check the expected type of the field\n      const expectedType = requiredFields[field];\n      const actualValue = json[field];\n\n      if (expectedType === 'string' && typeof actualValue !== 'string') {\n        return {\n          success: false,\n          message: `Field ${field} should be a string`,\n          data: null\n        };\n      }\n    }\n\n    return {\n      success: true,\n      message: \"JSON structure is valid\",\n      data: json\n    };\n  } catch (error) {\n    return {\n      success: false,\n      message: `Validation error: ${error.message}`,\n      data: null\n    };\n  }\n}\n\n// Run the validation and return the result\nconst validationResult = validateJsonStructure(jsonToValidate);\nreturn validationResult;"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-560,-660],"id":"487e521d-d926-40d8-a85a-14ecd419a3f7","name":"Code"},{"parameters":{"assignments":{"assignments":[{"id":"8a46e121-43ba-4b85-b327-cd8eac7e57c7","name":"success","value":"={{ $json.success }}","type":"boolean"},{"id":"87cf7eef-8c74-4336-ad8a-d47c571a9963","name":"message","value":"={{ $json.message }}","type":"string"},{"id":"b0780d81-60b5-4cca-a665-51dded9dc8f8","name":"output","value":"","type":"string"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[1500,-620],"id":"c0037448-4743-4237-8071-579c7e9d743b","name":"Salida JSON ERROR"},{"parameters":{"model":{"__rl":true,"value":"llama-3.3-70B-Instruct","mode":"list","cachedResultName":"llama-3.3-70B-Instruct"},"options":{"temperature":0.3}},"type":"@n8n/n8n-nodes-langchain.lmChatOpenAi","typeVersion":1.2,"position":[220,-380],"id":"f6740b15-7604-4d70-92fe-0ed86686949f","name":"OpenAI Chat Model","notesInFlow":true,"credentials":{"openAiApi":{"id":"lu44hoWfCkZALmQk","name":"Api Sentinel"}},"notes":"Llama30b"},{"parameters":{"jsCode":"// Código para nodo Function en n8n\n// Toma la entrada del nodo anterior y limpia el JSON manteniendo solo los campos especificados\n// Genera salida en formato markdown estructurado para IA\n\n// Obtener el primer elemento y acceder a data.context\nconst inputData = $('Webhook').first().json.body[0].body.context;\n\n// Campos que queremos mantener\nconst fieldsToKeep = [\n  'name',\n  'id', \n  'code',\n  'parent',\n  'status',\n  'family',\n  'cityInstall',\n  'productType',\n  'countryInstall',\n  'addressInstall',\n  'bandwidthService',\n  'bandwidthServiceUnit',\n  'activationDate'\n];\n\n// Función para verificar si una fecha está dentro de los últimos 20 días\nfunction isWithinLast20Days(dateString) {\n  if (!dateString || dateString.trim() === '') {\n    return false;\n  }\n  \n  // Parseamos la fecha en formato MM/DD/YYYY\n  const dateParts = dateString.split('/');\n  if (dateParts.length !== 3) {\n    return false;\n  }\n  \n  const month = parseInt(dateParts[0], 10);\n  const day = parseInt(dateParts[1], 10);\n  const year = parseInt(dateParts[2], 10);\n  \n  const itemDate = new Date(year, month - 1, day);\n  const today = new Date();\n  const twentyDaysAgo = new Date();\n  twentyDaysAgo.setDate(today.getDate() - 20);\n  \n  return itemDate >= twentyDaysAgo && itemDate <= today;\n}\n\n// Función para limpiar un objeto manteniendo solo los campos especificados\nfunction cleanObject(obj) {\n  const cleanedObj = {};\n  \n  fieldsToKeep.forEach(field => {\n    if (obj.hasOwnProperty(field)) {\n      cleanedObj[field] = obj[field];\n    } else {\n      cleanedObj[field] = \"\"; // Valor por defecto si el campo no existe\n    }\n  });\n  \n  return cleanedObj;\n}\n\n// Función para generar markdown estructurado\nfunction generateMarkdown(services) {\n  let markdown = \"# Listado de Servicios\\n\\n\";\n  \n  // Agrupar por status\n  const groupedByStatus = {};\n  services.forEach(service => {\n    const status = service.status || 'Sin Estado';\n    if (!groupedByStatus[status]) {\n      groupedByStatus[status] = [];\n    }\n    groupedByStatus[status].push(service);\n  });\n  \n  // Ordenar los status (Activo, Vendido, Suspendido, Cancelado)\n  const statusOrder = ['Activo', 'Vendido', 'Suspendido', 'Cancelado', 'Sin Estado'];\n  \n  statusOrder.forEach(status => {\n    if (groupedByStatus[status] && groupedByStatus[status].length > 0) {\n      markdown += `## Servicios con Estado: ${status}\\n\\n`;\n      markdown += `Total de servicios: ${groupedByStatus[status].length}\\n\\n`;\n      \n      // Agrupar por familia de producto\n      const groupedByFamily = {};\n      groupedByStatus[status].forEach(service => {\n        const family = service.family || 'Sin Familia';\n        if (!groupedByFamily[family]) {\n          groupedByFamily[family] = [];\n        }\n        groupedByFamily[family].push(service);\n      });\n      \n      // Mostrar cada familia\n      Object.keys(groupedByFamily).sort().forEach(family => {\n        markdown += `### Familia: ${family}\\n\\n`;\n        \n        // Tabla de servicios\n        markdown += \"| Nombre | ID | Código | Tipo de Producto | País | Ciudad | Ancho de Banda | Fecha Activación |\\n\";\n        markdown += \"|--------|----|---------|-----------------|---------|---------|-----------------|-----------------|\\n\";\n        \n        groupedByFamily[family].forEach(service => {\n          const bandwidth = service.bandwidthService + (service.bandwidthServiceUnit ? ` ${service.bandwidthServiceUnit}` : '');\n          markdown += `| ${service.name || 'N/A'} | ${service.id || 'N/A'} | ${service.code || 'N/A'} | ${service.productType || 'N/A'} | ${service.countryInstall || 'N/A'} | ${service.cityInstall || 'N/A'} | ${bandwidth || 'N/A'} | ${service.activationDate || 'N/A'} |\\n`;\n        });\n        \n        markdown += \"\\n\";\n      });\n    }\n  });\n  \n  // Resumen general\n  markdown += \"## Resumen General\\n\\n\";\n  markdown += `Total de servicios procesados: ${services.length}\\n\\n`;\n  \n  // Conteo por status\n  markdown += \"### Distribución por Estado\\n\\n\";\n  statusOrder.forEach(status => {\n    if (groupedByStatus[status] && groupedByStatus[status].length > 0) {\n      markdown += `- ${status}: ${groupedByStatus[status].length} servicios\\n`;\n    }\n  });\n  \n  // Conteo por familia\n  markdown += \"\\n### Distribución por Familia de Producto\\n\\n\";\n  const allFamilies = {};\n  services.forEach(service => {\n    const family = service.family || 'Sin Familia';\n    allFamilies[family] = (allFamilies[family] || 0) + 1;\n  });\n  \n  Object.keys(allFamilies).sort().forEach(family => {\n    markdown += `- ${family}: ${allFamilies[family]} servicios\\n`;\n  });\n  \n  return markdown;\n}\n\n// Array para almacenar todos los elementos limpios\nconst processedServices = [];\n// Set para trackear IDs ya procesados y evitar duplicados\nconst processedIds = new Set();\n\n// Verificar si inputData es un array y procesarlo\nif (Array.isArray(inputData)) {\n  // Limpiar cada objeto en el array context y agregarlo como elemento separado\n  inputData.forEach(contextItem => {\n    // Verificar si el ID ya fue procesado para evitar duplicados\n    if (processedIds.has(contextItem.id)) {\n      return; // Saltar si ya existe\n    }\n    \n    // Si el status es \"Cancelado\", verificar si está dentro de los últimos 20 días\n    if (contextItem.status === \"Cancelado\") {\n      if (isWithinLast20Days(contextItem.activationDate)) {\n        const cleanedItem = cleanObject(contextItem);\n        processedServices.push(cleanedItem);\n        processedIds.add(contextItem.id); // Marcar como procesado\n      }\n    } else {\n      // Si no es \"Cancelado\", incluirlo normalmente\n      const cleanedItem = cleanObject(contextItem);\n      processedServices.push(cleanedItem);\n      processedIds.add(contextItem.id); // Marcar como procesado\n    }\n  });\n}\n\n// Generar el markdown\nconst markdownOutput = generateMarkdown(processedServices);\n\n// Retornar como un solo elemento con el markdown\nreturn [{\n  json: {\n    markdown: markdownOutput,\n    message:$('Webhook').first().json.body[0].body.message,\n    tipo:$('Webhook').first().json.body[0].body.context[1],\n    totalServices: processedServices.length,\n    duplicatesRemoved: inputData.length - processedServices.length,\n    generatedAt: new Date().toISOString()\n  }\n}];\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-280,-660],"id":"a9765b7b-b6de-47b9-98d0-58c5cff5bb89","name":"Code1"},{"parameters":{"model":{"__rl":true,"value":"openai-nano","mode":"list","cachedResultName":"openai-nano"},"options":{"temperature":0.3}},"type":"@n8n/n8n-nodes-langchain.lmChatOpenAi","typeVersion":1.2,"position":[400,-380],"id":"c42b1944-318e-46cd-be85-632fc094aec6","name":"OpenAI Chat Model1","notesInFlow":true,"credentials":{"openAiApi":{"id":"lu44hoWfCkZALmQk","name":"Api Sentinel"}},"notes":"Openianano"},{"parameters":{"promptType":"define","text":"=Eres un agente para responder consulta sobre servicios del cliente. \n\nLa pregunta el usuario es:  {{ $json.message }}\n\nTu fuente de informacion es: {{ $json.markdown }}.\n\nResponde con la informacion estructurada.\n\nTus respuestas deben ser precisas, no complementes.\n\nResponde de forma muy corta y precisa.\n\nResponde formatenado el texto, coloca negrita, haz enfasis en lo importante, agrega viñetas.\n\nResponde en el mismos idioma que hace la pregunta el usuario.\n\n\n#Restricciones\n\nNo debes mencionar la fuente de informacion.\nNo tienes que extenderte, responde solo lo que consultan.\nNo respondas informacion que no este en la informacion enviada desde Nodo Code1.\nNo inventes respuestas.","needsFallback":true,"options":{}},"type":"@n8n/n8n-nodes-langchain.agent","typeVersion":2,"position":[420,-640],"id":"05f2b0a0-f8ee-4fa1-b13e-f4e6b4d39a90","name":"AI Agent","onError":"continueErrorOutput"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"b69ac0c6-db00-419f-b190-efcdcaa7eb35","leftValue":"={{ $json.body[0].body.context[0] }}","rightValue":1,"operator":{"type":"number","operation":"equals"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[-920,-420],"id":"d48f85ea-11ff-473f-a439-53c09a98f1e2","name":"If"},{"parameters":{"model":{"__rl":true,"value":"llama-3.3-70B-Instruct","mode":"list","cachedResultName":"llama-3.3-70B-Instruct"},"options":{"temperature":0.3}},"type":"@n8n/n8n-nodes-langchain.lmChatOpenAi","typeVersion":1.2,"position":[180,140],"id":"9aabc2ee-90b9-416b-b54a-fc0bcfccefd7","name":"OpenAI Chat Model2","notesInFlow":true,"credentials":{"openAiApi":{"id":"lu44hoWfCkZALmQk","name":"Api Sentinel"}},"notes":"Llama30b"},{"parameters":{"jsCode":"// Código JavaScript para nodo n8n - Organización de datos de casos de soporte\n// Procesa datos fraccionados y los estructura con campos clave limpios\n\n// Función principal para procesar los datos\nfunction procesarCasosSoporte() {\n    // Obtener los datos de entrada del nodo n8n\n    const inputData = $input.all();\n    \n    // Array para almacenar los casos organizados\n    let casosOrganizados = [];\n    \n    // Procesar cada elemento de entrada\n    for (let i = 0; i < inputData.length; i++) {\n        const item = inputData[i];\n        \n        // Verificar si hay contexto con casos\n        if (item.json.body && item.json.body.context) {\n            const casos = item.json.body.context;\n            \n            // Procesar cada caso en el contexto\n            casos.forEach(caso => {\n                if (caso.info && caso.contact) {\n                    // Extraer y limpiar los campos según la estructura especificada\n                    const casoLimpio = {\n                        info: {\n                            title: caso.info.title || \"\",\n                            casenumber: caso.info.casenumber || \"\",\n                            assigned: {\n                                id: caso.info.assigned?.id || \"\",\n                                value: caso.info.assigned?.value || \"\"\n                            },\n                            startdate: caso.info.startdate || \"\",\n                            enddate: caso.info.enddate || \"\",\n                            phonealt: caso.info.phonealt || \"\",\n                            category: {\n                                id: caso.info.category?.id || \"\",\n                                value: caso.info.category?.value || \"\"\n                            },\n                            services: {\n                                id: caso.info.services?.id || \"\",\n                                value: caso.info.services?.value || \"\"\n                            },\n                            status: {\n                                id: caso.info.status?.id || \"\",\n                                value: caso.info.status?.value || \"\"\n                            }\n                        },\n                        contact: {\n                            country: {\n                                id: caso.contact.country?.id || \"\",\n                                value: caso.contact.country?.value || \"\"\n                            },\n                            city: {\n                                id: caso.contact.city?.id || \"\",\n                                value: caso.contact.city?.value || \"\"\n                            },\n                            email: caso.contact.email || \"\"\n                        }\n                    };\n                    \n                    casosOrganizados.push(casoLimpio);\n                }\n            });\n        }\n    }\n    \n    return casosOrganizados;\n}\n\n// Función para buscar un caso específico por número\nfunction buscarCasoPorNumero(casos, numeroCaso) {\n    return casos.find(caso => caso.info.casenumber === numeroCaso);\n}\n\n// Función para filtrar casos por estado\nfunction filtrarCasosPorEstado(casos, estado) {\n    return casos.filter(caso => caso.info.status.value.toLowerCase() === estado.toLowerCase());\n}\n\n// Función para agrupar casos por servicio\nfunction agruparCasosPorServicio(casos) {\n    const agrupados = {};\n    \n    casos.forEach(caso => {\n        const servicio = caso.info.services.value;\n        if (!agrupados[servicio]) {\n            agrupados[servicio] = [];\n        }\n        agrupados[servicio].push(caso);\n    });\n    \n    return agrupados;\n}\n\n// Función para obtener estadísticas de casos\nfunction obtenerEstadisticas(casos) {\n    const estadisticas = {\n        total: casos.length,\n        abiertos: 0,\n        cerrados: 0,\n        en_proceso: 0,\n        servicios_unicos: new Set(),\n        grupos_asignados: new Set()\n    };\n    \n    casos.forEach(caso => {\n        // Contar por estado\n        const estado = caso.info.status.value.toLowerCase();\n        if (estado === 'abierto') {\n            estadisticas.abiertos++;\n        } else if (estado === 'cerrado') {\n            estadisticas.cerrados++;\n        } else if (estado === 'en proceso') {\n            estadisticas.en_proceso++;\n        }\n        \n        // Recopilar servicios únicos\n        estadisticas.servicios_unicos.add(caso.info.services.value);\n        \n        // Recopilar grupos asignados únicos\n        estadisticas.grupos_asignados.add(caso.info.assigned.value);\n    });\n    \n    // Convertir Sets a arrays\n    estadisticas.servicios_unicos = Array.from(estadisticas.servicios_unicos);\n    estadisticas.grupos_asignados = Array.from(estadisticas.grupos_asignados);\n    \n    return estadisticas;\n}\n\n// EJECUCIÓN PRINCIPAL DEL NODO N8N\ntry {\n    // Procesar todos los casos\n    const casosLimpios = procesarCasosSoporte();\n    \n    // Obtener el mensaje de consulta si existe\n    const inputData = $input.all();\n    let mensajeConsulta = \"\";\n    if (inputData[0]?.json?.body?.message) {\n        mensajeConsulta = inputData[0].json.body.message;\n    }\n    \n    // Buscar caso específico si se menciona un número en la consulta\n    let casoEspecifico = null;\n    const numeroMatch = mensajeConsulta.match(/TT\\d+/);\n    if (numeroMatch) {\n        const numeroCaso = numeroMatch[0];\n        casoEspecifico = buscarCasoPorNumero(casosLimpios, numeroCaso);\n    }\n    \n    // Obtener estadísticas\n    const estadisticas = obtenerEstadisticas(casosLimpios);\n    \n    // Agrupar casos por estado\n    const casosPorEstado = {\n        abiertos: filtrarCasosPorEstado(casosLimpios, 'abierto'),\n        cerrados: filtrarCasosPorEstado(casosLimpios, 'cerrado'),\n        en_proceso: filtrarCasosPorEstado(casosLimpios, 'en proceso')\n    };\n    \n    // Generar respuesta en formato Markdown\n    let markdown = \"# 📋 Informe de Casos de Soporte Técnico\\n\\n\";\n    \n    // Información de la consulta\n    if (mensajeConsulta) {\n        markdown += `**Consulta original:** ${mensajeConsulta}\\n\\n`;\n    }\n    \n    markdown += `**Total de casos procesados:** ${casosLimpios.length}\\n`;\n    markdown += `**Fecha del informe:** ${new Date().toLocaleString('es-CO')}\\n\\n`;\n    \n    // Caso específico solicitado\n    if (casoEspecifico) {\n        markdown += \"## 🎯 Caso Solicitado\\n\\n\";\n        markdown += `### ${casoEspecifico.info.title}\\n\\n`;\n        markdown += `| Campo | Valor |\\n`;\n        markdown += `|-------|-------|\\n`;\n        markdown += `| **Número de Caso** | \\`${casoEspecifico.info.casenumber}\\` |\\n`;\n        markdown += `| **Estado** | ${casoEspecifico.info.status.value} |\\n`;\n        markdown += `| **Fecha Inicio** | ${casoEspecifico.info.startdate} |\\n`;\n        markdown += `| **Fecha Fin** | ${casoEspecifico.info.enddate || 'En curso'} |\\n`;\n        markdown += `| **Categoría** | ${casoEspecifico.info.category.value} |\\n`;\n        markdown += `| **Servicio** | ${casoEspecifico.info.services.value} |\\n`;\n        markdown += `| **Grupo Asignado** | ${casoEspecifico.info.assigned.value} |\\n`;\n        markdown += `| **País** | ${casoEspecifico.contact.country.value} |\\n`;\n        markdown += `| **Ciudad** | ${casoEspecifico.contact.city.value} |\\n`;\n        markdown += `| **Email** | ${casoEspecifico.contact.email} |\\n\\n`;\n    }\n    \n    // Estadísticas generales\n    markdown += \"## 📊 Estadísticas Generales\\n\\n\";\n    markdown += `- **Total de casos:** ${estadisticas.total}\\n`;\n    markdown += `- **Casos abiertos:** ${estadisticas.abiertos} (${Math.round(estadisticas.abiertos/estadisticas.total*100)}%)\\n`;\n    markdown += `- **Casos cerrados:** ${estadisticas.cerrados} (${Math.round(estadisticas.cerrados/estadisticas.total*100)}%)\\n`;\n    markdown += `- **Casos en proceso:** ${estadisticas.en_proceso} (${Math.round(estadisticas.en_proceso/estadisticas.total*100)}%)\\n\\n`;\n    \n    // Casos por estado\n    markdown += \"## 📋 Casos por Estado\\n\\n\";\n    \n    if (casosPorEstado.abiertos.length > 0) {\n        markdown += `### 🔓 Casos Abiertos (${casosPorEstado.abiertos.length})\\n\\n`;\n        casosPorEstado.abiertos.slice(0, 10).forEach((caso, index) => {\n            markdown += `${index + 1}. **${caso.info.casenumber}** - ${caso.info.title}\\n`;\n            markdown += `   - 📅 Fecha: ${caso.info.startdate}\\n`;\n            markdown += `   - 🏢 Servicio: ${caso.info.services.value}\\n`;\n            markdown += `   - 👥 Asignado: ${caso.info.assigned.value}\\n\\n`;\n        });\n        if (casosPorEstado.abiertos.length > 10) {\n            markdown += `*... y ${casosPorEstado.abiertos.length - 10} casos más*\\n\\n`;\n        }\n    }\n    \n    if (casosPorEstado.cerrados.length > 0) {\n        markdown += `### ✅ Casos Cerrados (${casosPorEstado.cerrados.length})\\n\\n`;\n        casosPorEstado.cerrados.slice(0, 5).forEach((caso, index) => {\n            markdown += `${index + 1}. **${caso.info.casenumber}** - ${caso.info.title}\\n`;\n            markdown += `   - 📅 Cerrado: ${caso.info.enddate}\\n`;\n            markdown += `   - 🏢 Servicio: ${caso.info.services.value}\\n\\n`;\n        });\n        if (casosPorEstado.cerrados.length > 5) {\n            markdown += `*... y ${casosPorEstado.cerrados.length - 5} casos más*\\n\\n`;\n        }\n    }\n    \n    if (casosPorEstado.en_proceso.length > 0) {\n        markdown += `### ⏳ Casos en Proceso (${casosPorEstado.en_proceso.length})\\n\\n`;\n        casosPorEstado.en_proceso.forEach((caso, index) => {\n            markdown += `${index + 1}. **${caso.info.casenumber}** - ${caso.info.title}\\n`;\n            markdown += `   - 📅 Fecha: ${caso.info.startdate}\\n`;\n            markdown += `   - 🏢 Servicio: ${caso.info.services.value}\\n`;\n            markdown += `   - 👥 Asignado: ${caso.info.assigned.value}\\n\\n`;\n        });\n    }\n    \n    // Servicios más afectados\n    markdown += \"## 🏢 Servicios Más Afectados\\n\\n\";\n    const serviciosAgrupados = agruparCasosPorServicio(casosLimpios);\n    const serviciosOrdenados = Object.entries(serviciosAgrupados)\n        .sort((a, b) => b[1].length - a[1].length)\n        .slice(0, 5);\n    \n    serviciosOrdenados.forEach((servicio, index) => {\n        markdown += `${index + 1}. **${servicio[0]}** - ${servicio[1].length} casos\\n`;\n    });\n    markdown += \"\\n\";\n    \n    // Grupos de soporte\n    markdown += \"## 👥 Distribución por Grupos de Soporte\\n\\n\";\n    const gruposConteo = {};\n    casosLimpios.forEach(caso => {\n        const grupo = caso.info.assigned.value;\n        gruposConteo[grupo] = (gruposConteo[grupo] || 0) + 1;\n    });\n    \n    Object.entries(gruposConteo)\n        .sort((a, b) => b[1] - a[1])\n        .forEach((grupo, index) => {\n            markdown += `${index + 1}. **${grupo[0]}** - ${grupo[1]} casos\\n`;\n        });\n    \n    markdown += \"\\n---\\n\\n\";\n    markdown += \"*Informe generado automáticamente por el sistema de soporte técnico*\";\n    \n    // Retornar datos para n8n con markdown\n    return [{\n        json: {\n            markdown: markdown,\n            caso_solicitado: casoEspecifico,\n            estadisticas: estadisticas,\n            total_casos: casosLimpios.length\n        }\n    }];\n    \n} catch (error) {\n    // Manejo de errores para n8n\n    return [{\n        json: {\n            error: true,\n            mensaje: \"Error al procesar los casos: \" + error.message,\n            casos_procesados: 0\n        }\n    }];\n}\n\n// Funciones auxiliares para uso opcional en otros nodos\n\n// Exportar funciones para reutilización (comentar si no se necesita)\n/*\nmodule.exports = {\n    procesarCasosSoporte,\n    buscarCasoPorNumero,\n    filtrarCasosPorEstado,\n    agruparCasosPorServicio,\n    obtenerEstadisticas\n};\n*/\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-120,-100],"id":"a1c1a59e-cde2-4b88-be1d-d1d1287d6144","name":"Code3"},{"parameters":{"model":{"__rl":true,"value":"openai-nano","mode":"list","cachedResultName":"openai-nano"},"options":{"temperature":0.3}},"type":"@n8n/n8n-nodes-langchain.lmChatOpenAi","typeVersion":1.2,"position":[340,140],"id":"978fce24-63bf-4c8e-91c7-a18e0ce2288b","name":"OpenAI Chat Model3","notesInFlow":true,"credentials":{"openAiApi":{"id":"lu44hoWfCkZALmQk","name":"Api Sentinel"}},"notes":"Openianano"},{"parameters":{"promptType":"define","text":"=Eres un agente para responder consulta sobre Tickets o casos de soporte del cliente. \n\nLa pregunta el usuario es: {{ $('Webhook').item.json.body[0].body.message }}\n\nTu fuente de informacion es: {{ $json.markdown }}.\n\nResponde con la informacion estructurada.\n\nTus respuestas deben ser precisas, no complementes.\n\nResponde de forma muy corta y precisa.\n\nResponde formatenado el texto, coloca negrita, haz enfasis en lo importante, agrega viñetas.\n\nResponde en el mismos idioma que hace la pregunta el usuario.\n\n\n#Restricciones\n\nNo debes mencionar la fuente de informacion.\nNo tienes que extenderte, responde solo lo que consultan.\nNo respondas informacion que no este en la informacion enviada desde Nodo Code1.\nNo inventes respuestas.","needsFallback":true,"options":{}},"type":"@n8n/n8n-nodes-langchain.agent","typeVersion":2,"position":[420,-100],"id":"b8cee801-54c8-4c12-9b44-0ea54ccf7ec2","name":"AI Agent1","onError":"continueErrorOutput"},{"parameters":{"sessionIdType":"customKey","sessionKey":"={{ $('Webhook').item.json.headers['x-real-ip'] }}","databaseName":"chat_ia_context","contextWindowLength":10},"type":"@n8n/n8n-nodes-langchain.memoryMongoDbChat","typeVersion":1,"position":[540,180],"id":"12599a7f-e04d-4480-b554-420dbfe8fd13","name":"MongoDB Chat Memory","credentials":{"mongoDb":{"id":"GlPbQtJv6wW22OFC","name":"MongoDB account 3"}}},{"parameters":{"sessionIdType":"customKey","sessionKey":"={{ $('Webhook').item.json.headers['x-real-ip'] }}","databaseName":"chat_ia_context","contextWindowLength":10},"type":"@n8n/n8n-nodes-langchain.memoryMongoDbChat","typeVersion":1,"position":[560,-380],"id":"bb7144d5-0f97-4696-9fc8-cf0f68a5bd32","name":"MongoDB Chat Memory1","credentials":{"mongoDb":{"id":"GlPbQtJv6wW22OFC","name":"MongoDB account 3"}}},{"parameters":{"model":{"__rl":true,"value":"llama-4-Scout","mode":"list","cachedResultName":"llama-4-Scout"},"options":{"temperature":0.3}},"type":"@n8n/n8n-nodes-langchain.lmChatOpenAi","typeVersion":1.2,"position":[320,-1040],"id":"3fa6f19a-6192-471d-bd78-5aaf23f71fc3","name":"OpenAI Chat Model4","notesInFlow":true,"credentials":{"openAiApi":{"id":"lu44hoWfCkZALmQk","name":"Api Sentinel"}},"notes":"Llama30b"},{"parameters":{"promptType":"define","text":"=Eres un agente para responder consulta sobre servicios del cliente. \n\nLa pregunta el usuario es:  {{ $json.message }}\n\nResponde con la informacion estructurada.\n\nTus respuestas deben ser precisas, no complementes.\n\nResponde de forma muy corta y precisa.\n\nResponde formatenado el texto, coloca negrita, haz enfasis en lo importante, agrega viñetas.\n\nResponde en el mismos idioma que hace la pregunta el usuario.\n\n\n#Restricciones\n\nNo debes mencionar la fuente de informacion.\nNo tienes que extenderte, responde solo lo que consultan.\nNo respondas informacion que no este en la informacion enviada desde Nodo Code1.\nNo inventes respuestas.","options":{}},"type":"@n8n/n8n-nodes-langchain.agent","typeVersion":2,"position":[420,-1240],"id":"f8695065-4d3d-4c35-8bde-52c0bc2aa016","name":"AI Agent2","onError":"continueErrorOutput"},{"parameters":{"sessionIdType":"customKey","sessionKey":"={{ $('Webhook').item.json.headers['x-real-ip'] }}","databaseName":"chat_ia_context","contextWindowLength":10},"type":"@n8n/n8n-nodes-langchain.memoryMongoDbChat","typeVersion":1,"position":[500,-1040],"id":"d9b36886-4c9f-4902-b94a-e1f013e9b5f4","name":"MongoDB Chat Memory2","credentials":{"mongoDb":{"id":"GlPbQtJv6wW22OFC","name":"MongoDB account 3"}}},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"b7840a2a-b77b-45a3-ac16-08613343b1f1","leftValue":"={{ $json.tipo }}","rightValue":10,"operator":{"type":"number","operation":"equals"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[-60,-660],"id":"0c7df8fa-ae3c-4834-9cc3-6ccaa84ee5bd","name":"If1"},{"parameters":{"numberInputs":3},"type":"n8n-nodes-base.merge","typeVersion":3.2,"position":[1180,-620],"id":"99eeeb52-56e6-4ebe-8079-b4cb1038ebe7","name":"Merge"}],"connections":{"Webhook":{"main":[[{"node":"If","type":"main","index":0}]]},"Code":{"main":[[{"node":"Code1","type":"main","index":0}]]},"OpenAI Chat Model":{"ai_languageModel":[[{"node":"AI Agent","type":"ai_languageModel","index":0}]]},"Code1":{"main":[[{"node":"If1","type":"main","index":0}]]},"OpenAI Chat Model1":{"ai_languageModel":[[{"node":"AI Agent","type":"ai_languageModel","index":1}]]},"AI Agent":{"main":[[],[{"node":"Merge","type":"main","index":1}]]},"If":{"main":[[{"node":"Code","type":"main","index":0}],[{"node":"Code3","type":"main","index":0}]]},"OpenAI Chat Model2":{"ai_languageModel":[[{"node":"AI Agent1","type":"ai_languageModel","index":0}]]},"Code3":{"main":[[{"node":"AI Agent1","type":"main","index":0}]]},"OpenAI Chat Model3":{"ai_languageModel":[[{"node":"AI Agent1","type":"ai_languageModel","index":1}]]},"AI Agent1":{"main":[[],[{"node":"Merge","type":"main","index":2}]]},"MongoDB Chat Memory":{"ai_memory":[[{"node":"AI Agent1","type":"ai_memory","index":0}]]},"MongoDB Chat Memory1":{"ai_memory":[[{"node":"AI Agent","type":"ai_memory","index":0}]]},"OpenAI Chat Model4":{"ai_languageModel":[[{"node":"AI Agent2","type":"ai_languageModel","index":0}]]},"MongoDB Chat Memory2":{"ai_memory":[[{"node":"AI Agent2","type":"ai_memory","index":0}]]},"If1":{"main":[[{"node":"AI Agent2","type":"main","index":0}],[{"node":"AI Agent","type":"main","index":0}]]},"AI Agent2":{"main":[[],[{"node":"Merge","type":"main","index":0}]]},"Merge":{"main":[[{"node":"Salida JSON ERROR","type":"main","index":0}]]}},"settings":{"executionOrder":"v1","callerPolicy":"workflowsFromSameOwner","saveDataSuccessExecution":"all"},"staticData":null,"meta":{"templateCredsSetupCompleted":true},"pinData":{},"versionId":"add3f62c-1b99-4bbc-8a8a-09af9635921f","triggerCount":1,"tags":[]}